
%include { string.tom }

%include { int.tom }

%typeterm Expr {
  implement { libredragon.model.expressionapi.term.types.Expr }
  is_sort(t) { ($t instanceof libredragon.model.expressionapi.term.types.Expr) }

  equals(t1,t2) { ($t1==$t2) }

}
%op Expr Plus(e1:Expr, e2:Expr) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.Plus) }
  get_slot(e1, t) { $t.gete1() }
  get_slot(e2, t) { $t.gete2() }
  make(t0, t1) { libredragon.model.expressionapi.term.types.expr.Plus.make($t0, $t1) }
}

%op Expr Mult(e1:Expr, e2:Expr) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.Mult) }
  get_slot(e1, t) { $t.gete1() }
  get_slot(e2, t) { $t.gete2() }
  make(t0, t1) { libredragon.model.expressionapi.term.types.expr.Mult.make($t0, $t1) }
}

%op Expr Eq(e1:Expr, e2:Expr) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.Eq) }
  get_slot(e1, t) { $t.gete1() }
  get_slot(e2, t) { $t.gete2() }
  make(t0, t1) { libredragon.model.expressionapi.term.types.expr.Eq.make($t0, $t1) }
}

%op Expr Parenthesis(e:Expr) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.Parenthesis) }
  get_slot(e, t) { $t.gete() }
  make(t0) { libredragon.model.expressionapi.term.types.expr.Parenthesis.make($t0) }
}

%op Expr Sqrt(e:Expr) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.Sqrt) }
  get_slot(e, t) { $t.gete() }
  make(t0) { libredragon.model.expressionapi.term.types.expr.Sqrt.make($t0) }
}

%op Expr MoinsU(e:Expr) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.MoinsU) }
  get_slot(e, t) { $t.gete() }
  make(t0) { libredragon.model.expressionapi.term.types.expr.MoinsU.make($t0) }
}

%op Expr MoinsB(e1:Expr, e2:Expr) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.MoinsB) }
  get_slot(e1, t) { $t.gete1() }
  get_slot(e2, t) { $t.gete2() }
  make(t0, t1) { libredragon.model.expressionapi.term.types.expr.MoinsB.make($t0, $t1) }
}

%op Expr Non(e:Expr) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.Non) }
  get_slot(e, t) { $t.gete() }
  make(t0) { libredragon.model.expressionapi.term.types.expr.Non.make($t0) }
}

%op Expr Factorial(e:Expr) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.Factorial) }
  get_slot(e, t) { $t.gete() }
  make(t0) { libredragon.model.expressionapi.term.types.expr.Factorial.make($t0) }
}

%op Expr Or(e1:Expr, e2:Expr) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.Or) }
  get_slot(e1, t) { $t.gete1() }
  get_slot(e2, t) { $t.gete2() }
  make(t0, t1) { libredragon.model.expressionapi.term.types.expr.Or.make($t0, $t1) }
}

%op Expr And(e1:Expr, e2:Expr) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.And) }
  get_slot(e1, t) { $t.gete1() }
  get_slot(e2, t) { $t.gete2() }
  make(t0, t1) { libredragon.model.expressionapi.term.types.expr.And.make($t0, $t1) }
}

%op Expr Diff(e1:Expr, e2:Expr) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.Diff) }
  get_slot(e1, t) { $t.gete1() }
  get_slot(e2, t) { $t.gete2() }
  make(t0, t1) { libredragon.model.expressionapi.term.types.expr.Diff.make($t0, $t1) }
}

%op Expr Inf(e1:Expr, e2:Expr) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.Inf) }
  get_slot(e1, t) { $t.gete1() }
  get_slot(e2, t) { $t.gete2() }
  make(t0, t1) { libredragon.model.expressionapi.term.types.expr.Inf.make($t0, $t1) }
}

%op Expr Sup(e1:Expr, e2:Expr) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.Sup) }
  get_slot(e1, t) { $t.gete1() }
  get_slot(e2, t) { $t.gete2() }
  make(t0, t1) { libredragon.model.expressionapi.term.types.expr.Sup.make($t0, $t1) }
}

%op Expr Infegal(e1:Expr, e2:Expr) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.Infegal) }
  get_slot(e1, t) { $t.gete1() }
  get_slot(e2, t) { $t.gete2() }
  make(t0, t1) { libredragon.model.expressionapi.term.types.expr.Infegal.make($t0, $t1) }
}

%op Expr Supegal(e1:Expr, e2:Expr) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.Supegal) }
  get_slot(e1, t) { $t.gete1() }
  get_slot(e2, t) { $t.gete2() }
  make(t0, t1) { libredragon.model.expressionapi.term.types.expr.Supegal.make($t0, $t1) }
}

%op Expr Divide(e1:Expr, e2:Expr) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.Divide) }
  get_slot(e1, t) { $t.gete1() }
  get_slot(e2, t) { $t.gete2() }
  make(t0, t1) { libredragon.model.expressionapi.term.types.expr.Divide.make($t0, $t1) }
}

%op Expr Power(e1:Expr, e2:Expr) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.Power) }
  get_slot(e1, t) { $t.gete1() }
  get_slot(e2, t) { $t.gete2() }
  make(t0, t1) { libredragon.model.expressionapi.term.types.expr.Power.make($t0, $t1) }
}

%op Expr Epsilon() {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.Epsilon) }
  make() { libredragon.model.expressionapi.term.types.expr.Epsilon.make() }
}

%op Expr Nombre(i:int) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.Nombre) }
  get_slot(i, t) { $t.geti() }
  make(t0) { libredragon.model.expressionapi.term.types.expr.Nombre.make($t0) }
}

%op Expr Litteral(name:String) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.Litteral) }
  get_slot(name, t) { $t.getname() }
  make(t0) { libredragon.model.expressionapi.term.types.expr.Litteral.make($t0) }
}

%op Expr EmptyListPlus() {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.EmptyListPlus) }
  make() { libredragon.model.expressionapi.term.types.expr.EmptyListPlus.make() }
}

%op Expr ConsListPlus(HeadListPlus:Expr, TailListPlus:Expr) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.ConsListPlus) }
  get_slot(HeadListPlus, t) { $t.getHeadListPlus() }
  get_slot(TailListPlus, t) { $t.getTailListPlus() }
  make(t0, t1) { libredragon.model.expressionapi.term.types.expr.ConsListPlus.make($t0, $t1) }
}

%op Expr EmptyListMult() {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.EmptyListMult) }
  make() { libredragon.model.expressionapi.term.types.expr.EmptyListMult.make() }
}

%op Expr ConsListMult(HeadListMult:Expr, TailListMult:Expr) {
  is_fsym(t) { ($t instanceof libredragon.model.expressionapi.term.types.expr.ConsListMult) }
  get_slot(HeadListMult, t) { $t.getHeadListMult() }
  get_slot(TailListMult, t) { $t.getTailListMult() }
  make(t0, t1) { libredragon.model.expressionapi.term.types.expr.ConsListMult.make($t0, $t1) }
}


%oplist Expr ListPlus(Expr*) {
  is_fsym(t) { (($t instanceof libredragon.model.expressionapi.term.types.expr.ConsListPlus) || ($t instanceof libredragon.model.expressionapi.term.types.expr.EmptyListPlus)) }
  make_empty() { libredragon.model.expressionapi.term.types.expr.EmptyListPlus.make() }
  make_insert(e,l) { libredragon.model.expressionapi.term.types.expr.ConsListPlus.make($e,$l) }
  get_head(l) { $l.getHeadListPlus() }
  get_tail(l) { $l.getTailListPlus() }
  is_empty(l) { $l.isEmptyListPlus() }
}

%oplist Expr ListMult(Expr*) {
  is_fsym(t) { (($t instanceof libredragon.model.expressionapi.term.types.expr.ConsListMult) || ($t instanceof libredragon.model.expressionapi.term.types.expr.EmptyListMult)) }
  make_empty() { libredragon.model.expressionapi.term.types.expr.EmptyListMult.make() }
  make_insert(e,l) { libredragon.model.expressionapi.term.types.expr.ConsListMult.make($e,$l) }
  get_head(l) { $l.getHeadListMult() }
  get_tail(l) { $l.getTailListMult() }
  is_empty(l) { $l.isEmptyListMult() }
}
